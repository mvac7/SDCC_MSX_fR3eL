Memory MSX SDCC Library (fR3eL Project)
Version: 1.1
Date: 28/06/2018
Author: mvac7
Architecture: MSX
Format: C Object (SDCC .rel)
Programming language: C


History of versions:
- v1.1 (28/06/2018)<Add changes for v1.1
- v1.0 (01/03/2016) First version


Document changes:
- v1.1 (28/06/2018)<Add slot access functions
- v1.0 (01/03/2016) First version


--------------------------------------------------------------------------------
Index:

1 Introduction
2 Acknowledgments.
3 Requirements
4 Functions
  Read/Write Memory
  4.1 PEEK
  4.2 PEEKW
  4.3 POKE
  4.4 POKEW
  4.5 CopyRAM
  4.6 FillRAM
  Access to memory pages.
  4.7 GetPageSlot
  4.8 SetPageSlot
  4.9 IsExpanded
  4.10 GetPageSubslot
  4.11 SetPageSubslot


--------------------------------------------------------------------------------
1. Introduction:

This project is an Open Source library with basic functions for Z80's memory 
and page slots/sublots access.
  
Use them for developing MSX applications using Small Device C Compiler (SDCC).

In the source code (\examples), you can find applications for testing and 
learning purposes. 

In the header file there is a definition of boolean type, need for the functions.
This type uses the values "true" or "false" in lowercase, which equals 1 and 0 
respectively.

For more information about the MSX memory paging system, you can find the in 
the points: Primary slot select register & Secondary slot select register. 
(MSX Assembly Page) >> http://map.grauw.nl/resources/msx_io_ports.php#ppi

This library is part of the MSX fR3eL Project
https://github.com/mvac7/SDCC_MSX_fR3eL

Enjoy it! 



--------------------------------------------------------------------------------
2. Acknowledgments
  
  I want to give a special thanks to all those who freely share their knowledge 
  with the MSX developer community.

  Avelino Herrera > http://msx.atlantes.org/index_es.html
  Nerlaska > http://albertodehoyonebot.blogspot.com.es
  MSXKun/Paxanga soft > http://paxangasoft.retroinvaders.com/
  Fubukimaru > http://www.gamerachan.org/fubu/
  Marq/Lieves!Tuore > http://www.kameli.net/lt/
  Andrear > http://andrear.altervista.org/home/msxsoftware.php
  Sapphire/Z80ST > http://z80st.auic.es/
  Fernando García > http://www.z80st.es/cursos/bitvision-assembler
  Eric Boez > https://github.com/ericb59
  Ramones https://www.msxblog.es/tutoriales-de-programacion-en-ensamblador-ramones/
  Konamiman > https://www.konamiman.com
  MSX Assembly Page > http://map.grauw.nl/resources/msxbios.php
  Portar MSX Tech Doc > http://nocash.emubase.de/portar.htm
  MSX Resource Center > http://www.msx.org/
  Karoshi MSX Community > http://karoshi.auic.es/
  BlueMSX >> http://www.bluemsx.com/
  OpenMSX >> http://openmsx.sourceforge.net/
  WebMSX emulator by Paulo A. Peccin >> https://github.com/ppeccin/webmsx
  fMSX emulator by Marat Fayzullin >> https://fms.komkon.org/fMSX/
  Meisei  >> ?



--------------------------------------------------------------------------------
3. Requirements:

 * Small Device C Compiler (SDCC) v4.1 
   http://sdcc.sourceforge.net/
     
 * Hex2bin v2.5 
   http://hex2bin.sourceforge.net/



--------------------------------------------------------------------------------
4 Functions


================================================================================
4.1 PEEK

 char PEEK(address)
 
 Function : Read a 8 bit value from the RAM.
 Input    : [unsigned int] RAM address
 Output   : [char] value
 Examples : 

            char value;
            value = PEEK(0xE000);



================================================================================
4.2 PEEKW 

 unsigned int PEEKW(address)
 
 Function : Read a 16 bit value from the RAM
 Input    : [unsigned int] RAM address
 Output   : [unsigned int] value
 Examples :              

            unsigned int value;
            value = PEEKW(0xE000);


            
================================================================================
4.3 POKE

 void POKE(address,value)

 Function : Write an 8 bit value in RAM
 Input    : [unsigned int] RAM address
            [char] value
 Output   : -
 Examples : 
 
            POKE(0xE000,0xFF);            



================================================================================
4.4 POKEW

 void POKEW(address,value)

 Function : Write an 16 bit value in RAM
 Input    : [unsigned int] RAM address
            [unsigned int] value
 Output   : -
 Examples : 
 
            POKEW(0xE000,12345);


            
================================================================================
4.5 CopyRAM

 void CopyRAM(source, destination, length)

 Function : Copy a block of memory to another address
 Input    : [unsigned int] Source memory address.
            [unsigned int] Destination RAM address            
            [unsigned int] Length 
 Output   : -
 Examples : 
 
            CopyRAM(0x0000,0xE000,128);



================================================================================
4.6 FillRAM

 void FillRAM(address,length,value)

 Function : Fills an area of the RAM with a value
 Input    : [unsigned int] RAM address
            [unsigned int] length
            [char] value 
 Output   : -
 Examples : 
 
            FillRAM(0xE000,1234,0xFF);
            
                                               

================================================================================
4.7 GetPageSlot

 char GetPageSlot(page)

 Function : Provide the slot of the indicated page
 Input    : [char] page (0-3)
 Output   : [char] slot (0-3)
 Examples : 
 
            char value;
            value = GetPageSlot(2);



================================================================================
4.8 SetPageSlot

void SetPageSlot(page, slot)

 Function : Set a slot on the indicated page
 Input    : [char] page (0-3)
            [char] slot (0-3) 
 Output   : -
 Examples : 
 
            char slot;
            slot = GetPageSlot(1);
            SetPageSlot(2,slot);



================================================================================
4.9 IsExpanded

boolean IsExpanded(slot)

 Function : Returns if the slot is of the expanded type
 Input    : [char] slot (0-3)
 Output   : [boolean] true = Yes; false = No
 Examples : 
 
            if(IsExpanded(2))
            {
              PRINT("Yes");
            }



================================================================================
4.10 GetPageSubslot

char GetPageSubslot(page)

 Function : Provide the subslot of the indicated page (For expanded slots)
 Input    : [char] page (0-3)              
 Output   : [char] subslot (0-3)
 Examples : 
 
            char subslot;
            subslot = GetPageSubslot(1);
            
            

================================================================================
4.11 SetPageSubslot

void SetPageSubslot(page, subslot)

 Function : Set a subslot on the indicated page (For expanded slots)
 Input    : [char] page (0-3)
            [char] subslot (0-3)
 Output   : -
 Examples :
 
            if(IsExpanded(3))
            {
              SetPageSlot(2,3);
              SetPageSubslot(2,1);
            }



--------------------------------------------------------------------------------