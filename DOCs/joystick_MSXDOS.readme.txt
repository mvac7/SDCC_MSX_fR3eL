SDCC Joystick MSX-DOS Functions Library
Version: 2.0 (12/February/2023)
Author: mvac7 (aka aorante)
Architecture: MSX
Format: C Object (SDCC .rel)
Programming language: C and Z80 assembler 
Source Code: https://github.com/mvac7/SDCC_JOYSTICK_MSXDOS_Lib 




>>> Warning!: Document pending correction. <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

--------------------------------------------------------------------------------
Index:

1 Introduction
2 History of versions
3 Requirements
4 Definitions
  4.1 Joystick type
  4.2 Joystick state
  4.3 Trigger type
  4.4 Trigger state
5 Functions
  5.1 STICK
  5.2 STRIG 
                       


--------------------------------------------------------------------------------
1 Introduction:

Library with basic functions for reading joystick controllers or cursor keys of 
MSX computers.

This library does not use the MSX BIOS. It reads directly from the internal PSG 
ports to read the joysticks and from the PPI port to read the keyboard cursor 
keys. 

It is designed to develop MSX-DOS applications or other formats that do not 
require the use of the BIOS.

The direction combinations of the game controllers follow the same logic as the 
BIOS GTSTCK function:
- UP+DOWN+RIGHT+LEFT = 0 
- UP+DOWN = 0
- RIGHT+LEFT=0 
- UP+LEFT+DOWN = LEFT
- UP+RIGHT+DOWN = RIGHT
- LEFT+UP+RIGHT = UP
- LEFT+DOWN+RIGHT = DOWN

Use them for developing MSX applications using Small Device C Compiler (SDCC).

This project is an Open Source library. 
You can add part or all of this code in your application development or include it in other libraries/engines.

This library is part of the MSX fR3eL Project 
                                         https://github.com/mvac7/SDCC_MSX_fR3eL                           


--------------------------------------------------------------------------------
2 History of versions:

- v2.0 (12/February/2023) Programmed by directly reading the joystick (PSG) and 
                          keyboard (PPI) ports.
- v1.0 (2/12/2020) first versión. Uses the BIOS routines via interslot calls.


--------------------------------------------------------------------------------
3 Requirements:

 * Small Device C Compiler (SDCC) v4.1 
   http://sdcc.sourceforge.net/
     
 * Hex2bin v2.5 
   http://hex2bin.sourceforge.net/
   
   

--------------------------------------------------------------------------------
4 Constants


4.1 Joystick type
 
 *  CURSORKEYS  0
 *  JOYA        1
 *  JOYB        2


4.2 Joystick state

 *  INACTIVE    0
 *  UP          1
 *  UP_RIGHT    2
 *  RIGHT       3
 *  DOWN_RIGHT  4
 *  DOWN        5
 *  DOWN_LEFT   6
 *  LEFT        7
 *  UP_LEFT     8


4.3 Trigger type

 *  SPACEBAR       0
 *  JOYA_BUTTONA   1
 *  JOYB_BUTTONA   2
 *  JOYA_BUTTONB   3
 *  JOYB_BUTTONB   4


4.4 Trigger state

 *  UNPRESSED   0
 *  PRESSED    -1



--------------------------------------------------------------------------------
5 Functions


================================================================================
5.1 STICK

 Function : 
            char STICK(char joy)
            
 Description:
            Returns the joystick status
            
 Input    : [char] joy port: 
                    0=cursor keys 
                    1=joystick 1 
                    2=joystick 2
                             
 Output   : [char] status:
                    0=inactive
                    1=up
                    2=up & right
                    3=right
                    4=down & right
                    5=down
                    6=down & left
                    7=left
                    8=up & left
                             
 Examples : 
            char A;
            A = STICK(0);
            if (A==UP) UP();
            


================================================================================
5.2 STRIG 

 Function : 
            signed char STRIG(char joy)
            
 Description:
            Returns the trigger status.
            
 Input    : [char] 
                    0 - space key
                    1 - button 1 joystick 1
                    2 - button 1 joystick 2
                    3 - button 2 joystick 1
                    4 - button 2 joystick 2
                    
 Output   : [char] status: 
                    0 = inactive
                   -1 = when the space key or the joystick/mouse button is 
                        pressed down 
 
 Examples :              
            signed char Action;
            
            Action = STRIG(0);
            if (Action==UNPRESSED) Action = STRIG(1);
            if (Action==PRESSED) Fire();


--------------------------------------------------------------------------------
